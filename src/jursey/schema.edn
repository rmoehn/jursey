;; act  … action
;; cmd  … command
;; qa   … question-answer pair
;; ws   … workspace

;;;; agent

{:db/ident :agent/handle
 :db/valueType :db.type/string
 :db/unique :db.unique/identity
 :db/cardinality :db.cardinality/one}

{:db/ident :agent/root-ws
 :db/valueType :db.type/ref  ; ws
 :db/cardinality :db.cardinality/many}

;;;; ws

{:db/ident :ws/question
 :db/valueType :db.type/ref  ; hypertext
 :db/isComponent true
 :db/cardinality :db.cardinality/one}

{:db/ident :ws/answer
 :db/valueType :db.type/ref  ; hypertext
 :db/isComponent true
 :db/cardinality :db.cardinality/one}

{:db/ident :ws/sub-qa  ; qa
 :db/valueType :db.type/ref
 :db/isComponent true
 :db/cardinality :db.cardinality/many}

{:db/ident :ws/waiting-for
 :db/valueType :db.type/ref  ; ws
 :db/cardinality :db.cardinality/many}

{:db/ident :ws/reflect
 :db/valueType :db.type/ref ; reflect
 :db/isComponent true
 :db/cardinality :db.cardinality/one}

;;;; qa

{:db/ident :qa/question
 :db/valueType :db.type/ref  ; hypertext
 :db/isComponent true
 :db/cardinality :db.cardinality/one}

{:db/ident :qa/answer
 :db/valueType :db.type/ref  ; Either pointer hypertext
 :db/isComponent true
 :db/cardinality :db.cardinality/one}

{:db/ident     :qa/ws
 :db/valueType :db.type/ref ; ws
 :db/isComponent true
 :db/cardinality :db.cardinality/one}

;;;; reflect

{:db/ident :reflect/parent
 :db/valueType :db.type/ref ; Maybe reflect
 :db/isComponent true
 :db/cardinality :db.cardinality/one}

;; Note: I need both :ws/reflect and :reflect/ws. Because the same workspace
;; might be reflected in many places with one :reflect/* each. So a workspace
;; needs to indicate with its :ws/reflect attribute, which :reflect/* entity
;; should be shown for it.
{:db/ident :reflect/ws
 :db/valueType :db.type/ref ; ws
 :db/cardinality :db.cardinality/one}

{:db/ident :reflect/version
 :db/valueType :db.type/ref ; version
 :db/isComponent true
 :db/cardinality :db.cardinality/many}

{:db/ident     :reflect/reachable
 :db/valueType :db.type/ref ; Maybe tx
 :db/cardinality :db.cardinality/one}

;;;; version

{:db/ident :version/number
 :db/valueType :db.type/long
 :db/cardinality :db.cardinality/one}

{:db/ident :version/tx
 :db/valueType :db.type/ref ; tx
 :db/cardinality :db.cardinality/one}

{:db/ident :version/child
 :db/valueType :db.type/ref ; reflect
 :db/isComponent true
 :db/cardinality :db.cardinality/many}

;;;; act

{:db/ident :act/cmd
 :db/valueType :db.type/ref  ; enum
 :db/cardinality :db.cardinality/one}

{:db/ident :act/content
 :db/valueType :db.type/string
 :db/cardinality :db.cardinality/one}

;;;; act.cmd

[:db/add #db/id[:db.part/user] :db/ident :act.cmd/ask]
[:db/add #db/id[:db.part/user] :db/ident :act.cmd/reply]
[:db/add #db/id[:db.part/user] :db/ident :act.cmd/unlock]
[:db/add #db/id[:db.part/user] :db/ident :act.cmd/reflect]

;;;; tx

{:db/ident :tx/ws
 :db/valueType :db.type/ref  ; ws
 :db/cardinality :db.cardinality/one}

{:db/ident :tx/act
 :db/valueType :db.type/ref  ; act
 :db/cardinality :db.cardinality/one}

;;;; hypertext

{:db/ident :hypertext/content
 :db/valueType :db.type/string  ; with embedded pointer names
 :db/cardinality :db.cardinality/one}

{:db/ident :hypertext/pointer
 :db/valueType :db.type/ref  ; pointer
 :db/isComponent true
 :db/cardinality :db.cardinality/many}

;;;; pointer

{:db/ident :pointer/name
 :db/valueType :db.type/string
 :db/cardinality :db.cardinality/one}

{:db/ident :pointer/target
 :db/valueType :db.type/ref  ; One of hypertext, workspace, reflect, version
 :db/cardinality :db.cardinality/one}

{:db/ident :pointer/locked?
 :db/valueType :db.type/boolean
 :db/cardinality :db.cardinality/one}

;;;; automation

{:db/ident :automation/wsstr
 :db/valueType :db.type/string
 :db/cardinality :db.cardinality/one
 :db/unique :db.unique/identity}

{:db/ident :automation/act
 :db/valueType :db.type/ref ; act
 :db/isComponent true
 :db/cardinality :db.cardinality/one}
