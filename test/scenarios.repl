(use 'jursey.core)
(require '[cognitect.transcriptor :refer (check!)])

;; TODO tests:
;; - Pointing to nested hypertext ($sq.0.0).
;; - Unlocking a grandparent.
;; - Reachability. Draw a tree and deduce reachability test cases from it.
;; - Add assertions for the invariants, then run random tests.
;; - Multiple pointers at the same answer.
;; - Multiple pointers with the same target in one hypertext.
;; - Test several scenarios without reset.

;;;; Scenario: Reflection – pass through ask and reply

(do (set-up {:reset? true})
    (run-ask-root-question conn test-agent "What is the capital of [Texas]?")
    (start-working conn)
    (run [:ask "What is the capital city of $q.0?"])
    (run [:unlock "sq.0.a"])
    (run [:reply "Niniveh"])
    (run [:unlock "r"])
    (run [:unlock "r.2"])
    (run [:ask "Did $r.2.children.0 unlock the pointer in its question?"])
    (run [:unlock "sq.1.a"])
    (run [:unlock "q.0"])
    (run [:unlock "q.0.0"])
    (run [:reply "No, it didn't."])
    (run [:ask "What is the capital city of q.0? Make sure to unlock the pointer."])
    (run [:unlock "sq.2.a"])
    (run [:unlock "r"])
    (run [:reply "There is no pointer. See $r.0. Did you forget to write a dollar sign?"])
    (run [:unlock "sq.2.a.0"]))

(check!
  #{{"q" "What is the capital of $0?",
     "sq" {"0" {"q" "What is the capital city of $q.0?", "a" "Niniveh"},
           "1" {"q" "Did $r.2.children.0 unlock the pointer in its question?",
                "a" "No, it didn't."},
           "2" {"q" "What is the capital city of q.0? Make sure to unlock the pointer.",
                "a" "There is no pointer. See [0: \n{:max-v 1,
 “parent” :locked,
 “0”
 {“ws”
  {“q”
   “What is the capital city of q.0? Make sure to unlock the pointer.”,
   “sq” {},
   “r” :locked},
  “children” {},
  “act” [:unlock “r”]}}
]. Did you forget to write a dollar sign?"}},
     "r" {:max-v 9,
          "2" {"ws" {"q" "What is the capital of $0?",
                     "sq" {"0" {"q" "What is the capital city of $q.0?",
                                "a" "Niniveh"}},
                     "r" :locked},
               "children" {"0" :locked},
               "act" [:unlock "r"]}}}})

;; TODO: When laundering of nested reflection roots is supported, add the
;; rest of scenarios/07-reflect-ask-reply.edn. (RM 2019-02-04)
;(run [:ask "Give me this pointer unchanged: $sq.2.a.0.0.ws.r"])

;;;; Scenario: Reflect earlier reflect

(do (set-up {:reset? true})
    (run-ask-root-question conn test-agent "What is the capital of [Texas]?")
    (start-working conn)
    (def ws1 (run [:unlock "r"]))
    (run [:ask "What is the capital city of $q.0?"])
    (def ws3 (run [:unlock "r.1"]))
    (run [:unlock "r.3"]))

(check!
    #{{"q" "What is the capital of $0?",
       "sq" {"0" {"q" "What is the capital city of $q.0?", "a" :locked}},
       "r" {:max-v 4,
            "1" {"ws" ws1,
                 "children" {},
                 "act" [:ask "What is the capital city of $q.0?"]},
            "3" {"ws" ws3,
                 "children" {"0" :locked},
                 "act" [:unlock "r.3"]}}}})

;;;; Scenario: Reflect – unlock all versions

(do (set-up {:reset? true})
    (run-ask-root-question conn test-agent "What is the capital of [Texas]?")
    (start-working conn)
    (run [:ask "what is the capital city of $q.0?"])
    (run [:unlock "sq.0.a"])
    (run [:reply "Austin [Keep it weird.]"])
    (run [:unlock "r"])
    (run [:unlock "r.0"])
    (run [:unlock "r.1"])
    (run [:unlock "r.2"])
    (run [:unlock "r.3"]))

(check!
    #{{"q" "What is the capital of $0?",
       "sq" {"0" {"q" "what is the capital city of $q.0?", "a" "Austin $0"}},
       "r" {:max-v 7,
            "3" {"ws" {"q" "What is the capital of $0?",
                       "sq" {"0" {"q" "what is the capital city of $q.0?",
                                  "a" "Austin $0"}},
                       "r" {:max-v 3}},
                 "children" {"0" :locked},
                 "act" [:unlock "r.0"]},
            "1" {"ws" {"q" "What is the capital of $0?",
                       "sq" {"0" {"q" "what is the capital city of $q.0?",
                                  "a" :locked}},
                       "r" :locked},
                 "children" {"0" :locked},
                 "act" [:unlock "sq.0.a"]},
            "0" {"ws" {"q" "What is the capital of $0?", "sq" {}, "r" :locked},
                 "children" {},
                 "act" [:ask "what is the capital city of $q.0?"]},
            "2" {"ws" {"q" "What is the capital of $0?",
                       "sq" {"0" {"q" "what is the capital city of $q.0?",
                                  "a" "Austin $0"}},
                       "r" :locked},
                 "children" {"0" :locked},
                 "act" [:unlock "r"]}}}})

;;;; Scenario: Reflect reflect reflect

(do (set-up {:reset? true})
    (run-ask-root-question conn test-agent "What is the capital of [Texas]?")
    (start-working conn)
    (run [:ask "What is the capital city of $q.0?"])
    (run [:unlock "sq.0.a"])

    (run [:unlock "q.0"])
    (run [:ask "Who was the father of $q.0?"])
    (run [:unlock "sq.0.a"])

    (run [:unlock "r"])
    (run [:unlock "r.parent"])
    (def final-grandchild-ws (run [:unlock "r.parent.1"]))
    (run [:reply "Stephen F. Austin"])

    (run [:unlock "r"])
    (run [:unlock "r.3"])
    (run [:unlock "r.3.children.0"])
    (def final-child-ws (run [:unlock "r.3.children.0.3"]))
    final-child-ws)

(check!
    #{{"q" "What is the capital city of [0: Texas]?",
       "sq" {"0" {"q" "Who was the father of [q.0: Texas]?", "a" "Stephen F. Austin"}},
       "r" {:max-v 7,
            "parent" :locked,
            "3" {"ws" {"q" "What is the capital city of [0: Texas]?",
                       "sq" {"0" {"q" "Who was the father of [q.0: Texas]?",
                                  "a" "Stephen F. Austin"}},
                       "r" :locked},
                 "children" {"0" {:max-v 3,
                                  "parent" :locked,
                                  "3" {"ws" final-grandchild-ws
                                       "children" {}
                                       "act" [:reply "Stephen F. Austin"]}}},
                 "act" [:unlock "r"]}}}})

(do (run [:reply "Austin"])
    (run [:unlock "r"])
    (run [:unlock "r.2"])
    (run [:unlock "r.2.children.0"])
    (run [:unlock "r.2.children.0.7"]))

(check!
    #{{"q" "What is the capital of $0?",
       "sq" {"0" {"q" "What is the capital city of $q.0?", "a" "Austin"}},
       "r" {:max-v 6,
            "2" {"ws" {"q" "What is the capital of $0?",
                       "sq" {"0" {"q" "What is the capital city of $q.0?",
                                  "a" "Austin"}},
                       "r" :locked},
                 "children" {"0" {:max-v 7,
                                  "parent" :locked,
                                  "7" {"ws" final-child-ws
                                       "children" {"0" :locked}
                                       "act" [:reply "Austin"]}}},
                 "act" [:unlock "r"]}}}})

;;;; Scenario: Reflection – own past

(do (set-up {:reset? true})
    (run-ask-root-question conn test-agent "What is the capital of [Texas]?")
    (start-working conn)
    (run [:ask "What is the capital city of $q.0?"])
    (run [:ask "Why do you feed your dog whipping cream?"])
    (run [:unlock "sq.0.a"])
    (run [:unlock "q.0"])
    (run [:reply "Austin"])
    (run [:unlock "r"])
    (run [:unlock "r.0"])
    (run [:unlock "r.1"])
    (run [:unlock "r.6"]))

(check!
    #{{"q" "What is the capital of $0?",
       "sq" {"0" {"q" "What is the capital city of $q.0?", "a" "Austin"},
             "1" {"q" "Why do you feed your dog whipping cream?", "a" :locked}},
       "r" {:max-v 7,
            "0" {"ws" {"q" "What is the capital of $0?", "sq" {}, "r" :locked},
                 "children" {},
                 "act" [:ask "What is the capital city of $q.0?"]},
            "1" {"ws" {"q" "What is the capital of $0?",
                       "sq" {"0" {"q" "What is the capital city of $q.0?",
                                  "a" :locked}},
                       "r" :locked},
                 "children" {"0" :locked},
                 "act" [:ask "Why do you feed your dog whipping cream?"]},
            "6" {"ws" {"q" "What is the capital of $0?",
                       "sq" {"0" {"q" "What is the capital city of $q.0?",
                                  "a" "Austin"},
                             "1" {"q" "Why do you feed your dog whipping cream?",
                                  "a" :locked}},
                       "r" {:max-v 6,
                            "0" {"ws" {"q" "What is the capital of $0?",
                                       "sq" {},
                                       "r" :locked},
                                 "children" {},
                                 "act" [:ask "What is the capital city of $q.0?"]},
                            "1" {"ws" {"q" "What is the capital of $0?",
                                       "sq" {"0" {"q" "What is the capital city of $q.0?",
                                                  "a" :locked}},
                                       "r" :locked},
                                 "children" {"0" :locked},
                                 "act" [:ask "Why do you feed your dog whipping cream?"]}}},
                 "children" {"0" :locked, "1" :locked},
                 "act" [:unlock "r.6"]}}}})

;;;; Scenario: Reflection – two reflection pointers in question and answer

(do (set-up {:reset? true})
    (run-ask-root-question conn test-agent "What is the capital of [Texas]?")
    (start-working conn)
    (run [:ask "What is the capital city of $q.0?"])
    (run [:unlock "r"])
    (run [:unlock "r.1"])
    (run [:ask "How do $r.0 and $r.1.children.0 look to you?"])
    (run [:unlock "sq.1.a"])
    (run [:unlock "q.0"])
    (run [:unlock "q.1"])
    (run [:unlock "r"])
    (run [:unlock "r.parent"])
    (run [:unlock "r.parent.2"])
    (run [:reply "I guess they look just like $r.parent.0 and $r.parent.2.children.0"])
    (run [:unlock "sq.1.a.0"])
    (run [:unlock "sq.1.a.1"]))

(check!
    #{{"q" "What is the capital of $0?",
       "sq" {"0" {"q" "What is the capital city of $q.0?", "a" :locked},
             "1" {"q" "How do $r.0 and $r.1.children.0 look to you?",
 "a" "I guess they look just like [0: \n{:max-v 3,
 “0”
 {“ws” {“q” “What is the capital of $0?”, “sq” {}, “r” :locked},
  “children” {},
  “act” [:ask “What is the capital city of $q.0?”]}}
] and [1: \n{:max-v 0, “parent” :locked}\n]"}},
       "r" {:max-v 7,
            "1" {"ws" {"q" "What is the capital of $0?",
                       "sq" {"0" {"q" "What is the capital city of $q.0?",
                                  "a" :locked}},
                       "r" :locked},
                 "children" {"0" :locked},
                 "act" [:unlock "r"]}}}})

;;;; Scenario: Reflection – delayed unlock

(do (set-up {:reset? true})
    (run-ask-root-question conn test-agent "What is the capital of [Texas]?")
    (start-working conn)
    (run [:ask "Have a look at $r."])
    (run [:ask "Do you have a [dog]?"])
    (run [:unlock "sq.0.a"])
    (run [:unlock "q.0"]))

(check!
    #{{"q" "Have a look at [0: \n{:max-v 0}\n].",
       "sq" {},
       "r" :locked}})

;;;; Scenario: Reflection – pass unlocked reflected pointer in non-root reply

(do (set-up {:reset? true})
    (run-ask-root-question conn test-agent "What is the capital of [Texas]?")
    (start-working conn)
    (run [:ask "What is the capital city of $q.0?"])
    (run [:unlock "sq.0.a"])
    (run [:unlock "r"])
    (run [:unlock "r.parent"])
    (run [:unlock "r.parent.0"])
    (run [:reply "$r.parent.0.ws.q looks funny to me."])
    (run [:unlock "sq.0.a.0"])
    (run [:unlock "sq.0.a.0.0"]))

(check!
    #{{"q" "What is the capital of $0?",
       "sq" {"0" {"q" "What is the capital city of $q.0?",
                  "a" "[0: What is the capital of [0: Texas]?] looks funny to me."}},
       "r" :locked}})

;;;; Scenario: Reflection – pass locked reflected pointer in root reply

(do (set-up {:reset? true})
    (run-ask-root-question conn test-agent "What is the capital of [Texas [(USA)]]?")
    (start-working conn)
    (run [:unlock "r"])
    (run [:unlock "r.0"])
    (run [:reply "I also wonder what the capital of $r.0.ws.q.0 is."])
    (get-root-qas conn test-agent))

;;;; Scenario: Reflection – pass locked version

(do (set-up {:reset? true})
    (run-ask-root-question conn test-agent "What is the capital of [Texas [(USA)]]?")
    (start-working conn)
    (run [:unlock "q.0"])
    (run [:unlock "r"])
    (run [:reply "Look at how I looked in the beginning: $r.0"])
    (get-root-qas conn test-agent))

(check! #{'(["What is the capital of [1: Texas [1: (USA)]]?"
            "Look at how I looked in the beginning: [0: \n{:max-v 2,
 “0”
 {“ws” {“q” “What is the capital of $0?”, “sq” {}, “r” :locked},
  “children” {},
  “act” [:unlock “q.0”]}}
]"])})

;;;; Scenario: Reflection – pass locked child and launder a reflected hypertext pointer

(do (set-up {:reset? true})
    (run-ask-root-question conn test-agent "What is the capital of [Texas [(USA)]]?")
    (start-working conn)
    (run [:ask "What is the capital city of $q.0?"])
    (run [:unlock "sq.0.a"])
    (run [:unlock "q.0"])
    (run [:ask "Do you know $q.0?"])
    (run [:unlock "r"])
    (run [:unlock "r.3"])
    (run [:reply "Ask $r.3.children.0."])
    (run [:unlock "sq.0.a.0"])
    (run [:unlock "sq.0.a.0.0"])
    (run [:ask "Give me $sq.0.a.0.0.ws.q.0."])
    (run [:unlock "sq.1.a"])
    (run [:reply "$q.0. You asked for it."])
    (run [:unlock "sq.1.a.0"])
    (run [:unlock "sq.1.a.0.0"]))

(check!
    #{{"q" "What is the capital of $0?",
       "sq" {"0" {"q" "What is the capital city of $q.0?",
 "a" "Ask [0: \n{:max-v 0,
 “parent” :locked,
 “0”
 {“ws” {“q” “Do you know $0?”, “sq” {}, “r” :locked},
  “children” {},
  “act” nil}}
]."},
             "1" {"q" "Give me $sq.0.a.0.0.ws.q.0.",
                  "a" "[0: Texas [0: (USA)]]. You asked for it."}},
       "r" :locked}})

;;;; Scenario: Reflection – pass locked version and unlocked parent in non-root answer

(do (set-up {:reset? true})
    (run-ask-root-question conn test-agent "What is the capital of [Texas [(USA)]]?")
    (start-working conn)
    (run [:ask "What is the capital city of $q.0?"])
    (run [:unlock "sq.0.a"])
    (run [:unlock "r"])
    (run [:unlock "r.parent"])
    (run [:reply "I have no idea. I don't like $r.parent."])
    (run [:unlock "sq.0.a.0"])
    (run [:unlock "sq.0.a.0.0"])
    (run [:ask "$sq.0.a.0.0 is a curious case, isn't it?"])
    (run [:unlock "sq.1.a"])
    (run [:reply "I don't even want to look at $q.0."])
    (run [:unlock "sq.1.a.0"]))

(check!
    #{{"q" "What is the capital of $0?",
       "sq" {"0" {"q" "What is the capital city of $q.0?",
             "a" "I have no idea. I don't like [0: \n{:max-v 0,
 “0”
 {“ws” {“q” “What is the capital of $0?”, “sq” {}, “r” :locked},
  “children” {},
  “act” [:ask “What is the capital city of $q.0?”]}}
]."},
             "1" {"q" "$sq.0.a.0.0 is a curious case, isn't it?",
                  "a" "I don't even want to look at [0: \n{:max-v 0,
 “0”
 {“ws” {“q” “What is the capital of $0?”, “sq” {}, “r” :locked},
  “children” {},
  “act” [:ask “What is the capital city of $q.0?”]}}
]."}},
       "r" :locked}})

;;;; Scenario: Reflection – root reply with hypertext and reflection pointer

(do (set-up {:reset? true})
    (run-ask-root-question conn test-agent "What is the capital of [Texas]?")
    (start-working conn)
    (run [:unlock "q.0"])
    (run [:unlock "r"])
    (run [:reply "[Austin [Stephen F.]], I saw it in $r."])
    (get-root-qas conn test-agent))

(check!
    #{'(["What is the capital of [1: Texas]?"
         "[0: Austin [0: Stephen F.]], I saw it in [1: \n{:max-v 2}\n]."])})

;;;; Scenario: Reflection – pass locked parent version

(do (set-up {:reset? true})
    (run-ask-root-question conn test-agent "What is the capital of [Texas]?")
    (start-working conn)
    (run [:ask "What is the capital city of $q.0?"])
    (run [:unlock "sq.0.a"])
    (run [:unlock "r"])
    (run [:unlock "r.parent"])
    (run [:ask "Did I have a good $r.parent.0?"])
    (run [:unlock "sq.0.a"])
    (run [:unlock "q.0"]))

(check!
    #{{"q" "Did I have a good [0: \n{:max-v 0,
 “0”
 {“ws” {“q” “What is the capital of $0?”, “sq” {}, “r” :locked},
  “children” {},
  “act” [:ask “What is the capital city of $q.0?”]}}
]?",
       "sq" {},
       "r" :locked}})

;;;; Scenario: Reflection – pass locked child version

(do (set-up {:reset? true})
    (run-ask-root-question conn test-agent "What is the capital of [Texas]?")
    (start-working conn)
    (run [:ask "What is the capital city of $q.0?"])
    (run [:unlock "sq.0.a"])
    (run [:unlock "q.0"])
    (run [:reply "Austin"])
    (run [:unlock "r"])
    (run [:unlock "r.3"])
    (run [:unlock "r.3.children.0"])
    (run [:ask "Was the pointer in the question in $r.3.children.0.1 unlocked?"])
    (run [:unlock "sq.1.a"])
    (run [:unlock "q.0"])
    (run [:reply "Yes."]))

(check!
    #{{"q" "What is the capital of $0?",
       "sq" {"0" {"q" "What is the capital city of $q.0?", "a" "Austin"},
             "1" {"q" "Was the pointer in the question in $r.3.children.0.1 unlocked?",
                  "a" "Yes."}},
       "r" {:max-v 7,
            "3" {"ws" {"q" "What is the capital of $0?",
                       "sq" {"0" {"q" "What is the capital city of $q.0?",
                                  "a" "Austin"}},
                       "r" {:max-v 3}},
                 "children" {"0" {:max-v 1, "parent" :locked}},
                 "act" [:unlock "r.3"]}}}})

;;;; Scenario: Reflection – pass unlocked top-level version

(do (set-up {:reset? true})
    (run-ask-root-question conn test-agent "What is the capital of [Texas]?")
    (start-working conn)
    (run [:ask "What is the capital city of $q.0?"])
    (run [:unlock "r"])
    (run [:unlock "r.0"])
    (run [:ask "How was I in my younger days ($r.0)?"])
    (run [:unlock "sq.1.a"])
    (run [:unlock "q.0"])
    (run [:unlock "q.0.1"]))

(check!
    #{{"q" "How was I in my younger days ([0: \n{:max-v 3,
 “0”
 {“ws” {“q” “What is the capital of $0?”, “sq” {}, “r” :locked},
  “children” {},
  “act” [:ask “What is the capital city of $q.0?”]},
 “1”
 {“ws”
  {“q” “What is the capital of $0?”,
   “sq” {“0” {“q” “What is the capital city of $q.0?”, “a” :locked}},
   “r” :locked},
  “children” {“0” :locked},
  “act” [:unlock “r”]}}
])?",
       "sq" {},
       "r" :locked}})

;;;; Scenario: Reflection – pass locked top-level version

(do (set-up {:reset? true})
    (run-ask-root-question conn test-agent "What is the capital of [Texas]?")
    (start-working conn)
    (run [:ask "What is the capital city of $q.0?"])
    (run [:unlock "r"])
    (run [:ask "How was I in my younger days ($r.0)?"])
    (run [:unlock "sq.1.a"])
    (run [:unlock "q.0"])
    (run [:unlock "q.0.1"]))

(check!
    #{{"q" "How was I in my younger days ([0: \n{:max-v 2,
 “0”
 {“ws” {“q” “What is the capital of $0?”, “sq” {}, “r” :locked},
  “children” {},
  “act” [:ask “What is the capital city of $q.0?”]},
 “1”
 {“ws”
  {“q” “What is the capital of $0?”,
   “sq” {“0” {“q” “What is the capital city of $q.0?”, “a” :locked}},
   “r” :locked},
  “children” {“0” :locked},
  “act” [:unlock “r”]}}
])?",
       "sq" {},
       "r" :locked}})

;;;; Scenario: Reflection – pass locked parent

(do (set-up {:reset? true})
    (run-ask-root-question conn test-agent "What is the capital of [Texas]?")
    (start-working conn)
    (run [:ask "What is the capital city of $q.0?"])
    (run [:unlock "sq.0.a"])
    (run [:unlock "r"])
    (run [:ask "Do you think I have a good $r.parent?"])
    (run [:unlock "sq.0.a"])
    (run [:unlock "q.0"])
    (run [:unlock "q.0.0"]))

(check!
    #{{"q" "Do you think I have a good [0: \n{:max-v 0,
 “0”
 {“ws” {“q” “What is the capital of $0?”, “sq” {}, “r” :locked},
  “children” {},
  “act” [:ask “What is the capital city of $q.0?”]}}
]?",
       "sq" {},
       "r" :locked}})

;;;; Scenario: Reflection – pass locked child

(do (set-up {:reset? true})
    (run-ask-root-question conn test-agent "What is the capital of [Texas]?")
    (start-working conn)
    (run [:ask "What is the capital city of $q.0?"])
    (run [:unlock "r"])
    (run [:unlock "r.2"])
    (run [:ask "How do you like $r.2.children.0?"])
    (run [:unlock "sq.1.a"])
    (run [:unlock "q.0"])
    (run [:unlock "q.0.0"])
    (run [:unlock "q.0.parent"]))

(check!
    #{{"q" "How do you like [0: \n{:max-v 0,
 “parent” {:max-v 0},
 “0”
 {“ws” {“q” “What is the capital city of $0?”, “sq” {}, “r” :locked},
  “children” {},
  “act” nil}}
]?",
       "sq" {},
       "r" :locked}})

;;;; Scenario: Reflection – pass locked top-level "r"

(do (set-up {:reset? true})
    (run-ask-root-question conn test-agent "What is the capital of [Texas]?")
    (start-working conn)
    (run [:ask "Can you see anything in $r?"])
    (run [:unlock "sq.0.a"])
    (run [:unlock "q.0"])
    (run [:unlock "q.0.0"])
    (run [:ask "Seriously, what is the capital of $q.0.0.ws.q.0?"])
    (run [:unlock "sq.0.a"])
    (run [:unlock "q.0"])
    (run [:reply "Austin!"])
    (run [:reply "$sq.0.a"])
    (run [:unlock "sq.0.a.0"])
    (run [:reply "$sq.0.a.0"])
    (get-root-qas conn test-agent))

(check!
    #{'(["What is the capital of [1: Texas]?" "[0: Austin!]"])})

;;;; Scenario: Reflection – pass already unlocked things

(do (set-up {:reset? true})
    (run-ask-root-question conn test-agent "What is the capital of [Texas]?")
    (start-working conn)
    (run [:ask "What is the capital city of $q.0?"])
    (run [:ask "Why do you feed your dog whipped cream?"])
    (run [:unlock "sq.0.a"])
    (run [:unlock "q.0"])
    (run [:reply "Austin"])
    (run [:unlock "r"])
    (run [:unlock "r.4"])
    (run [:unlock "r.4.children.0"])
    (run [:unlock "r.4.children.0.0"])
    (run [:unlock "r.4.children.0.1"])
    (run [:ask "How do you like $r.4.children.0?"])
    (run [:unlock "sq.2.a"])
    (run [:unlock "q.0"])
    (run [:unlock "q.0.1"])
    (run [:unlock "q.0.parent"])
    (run [:unlock "q.0.parent.0"]))

(check!
    #{{"q"  "How do you like [0: \n{:max-v 1,
 “parent”
 {:max-v 0,
  “0”
  {“ws” {“q” “What is the capital of $0?”, “sq” {}, “r” :locked},
   “children” {},
   “act” [:ask “What is the capital city of $q.0?”]}},
 “1”
 {“ws”
  {“q” “What is the capital city of [0: Texas]?”,
   “sq” {},
   “r” :locked},
  “children” {},
  “act” [:reply “Austin”]}}
]?",
       "sq" {},
       "r"  :locked}})

;;;; Scenario: Reflection – root workspace child – parent

(do (set-up {:reset? true})
    (run-ask-root-question conn test-agent "What is the capital of [Texas]?")
    (start-working conn)
    (run [:ask "What is the capital city of $q.0?"])
    (run [:ask "Why do you feed your dog whipped cream?"])
    (run [:unlock "sq.0.a"])
    (run [:unlock "q.0"])
    (run [:reply "Austin"])
    (run [:unlock "r"])
    (run [:unlock "r.4"])
    (run [:unlock "r.4.children.0"])
    (run [:unlock "r.4.children.0.0"])
    (run [:unlock "r.4.children.0.1"])
    (run [:unlock "r.4.children.0.parent"])
    (run [:unlock "r.4.children.0.parent.0"]))

(check!
    #{{"q" "What is the capital of $0?",
       "sq" {"0" {"q" "What is the capital city of $q.0?", "a" "Austin"},
             "1" {"q" "Why do you feed your dog whipped cream?", "a" :locked}},
       "r" {:max-v 10,
            "4" {"ws" {"q" "What is the capital of $0?",
                       "sq" {"0" {"q" "What is the capital city of $q.0?",
                                  "a" "Austin"},
                             "1" {"q" "Why do you feed your dog whipped cream?",
                                  "a" :locked}},
                       "r" {:max-v 4}},
                 "children" {"0" {:max-v 1,
                                  "parent" {:max-v 0,
                                            "0" {"ws" {"q" "What is the capital of $0?",
                                                       "sq" {},
                                                       "r" :locked},
                                                 "children" {},
                                                 "act" [:ask "What is the capital city of $q.0?"]}},
                                  "0" {"ws" {"q" "What is the capital city of $0?",
                                             "sq" {},
                                             "r" :locked},
                                       "children" {},
                                       "act" [:unlock "q.0"]},
                                  "1" {"ws" {"q" "What is the capital city of [0: Texas]?",
                                             "sq" {},
                                             "r" :locked},
                                       "children" {},
                                       "act" [:reply "Austin"]}},
                             "1" :locked},
                 "act" [:unlock "r.4"]}}}})


;;;; Scenario: Reflection – sub-question parent – child – parent

(do (set-up {:reset? true})
    (run-ask-root-question conn test-agent "What is the capital of [Texas]?")
    (start-working conn)
    (run [:ask "What is the capital city of $q.0?"])
    (run [:ask "Why do you feed your dog whipped cream?"])
    (run [:unlock "sq.1.a"])
    (run [:unlock "r"])
    (run [:unlock "r.parent"])
    (run [:unlock "r.parent.1"])
    (run [:unlock "r.parent.1.children.0"])
    (run [:unlock "r.parent.1.children.0.0"])
    (run [:unlock "r.parent.1.children.0.parent"])
    (run [:unlock "r.parent.1.children.0.parent.0"]))

(check!
    #{{"q" "Why do you feed your dog whipped cream?",
       "sq" {},
       "r" {:max-v 7,
            "parent" {:max-v 1,
                      "1" {"ws" {"q" "What is the capital of $0?",
                                 "sq" {"0" {"q" "What is the capital city of $q.0?",
                                            "a" :locked}},
                                 "r" :locked},
                           "children" {"0" {:max-v 0,
                                            "parent" {:max-v 0,
                                                      "0" {"ws" {"q" "What is the capital of $0?",
                                                                 "sq" {},
                                                                 "r" :locked},
                                                           "children" {},
                                                           "act" [:ask "What is the capital city of $q.0?"]}},
                                            "0" {"ws" {"q" "What is the capital city of $0?",
                                                       "sq" {},
                                                       "r" :locked},
                                                 "children" {},
                                                 "act" nil}}},
                           "act" [:ask "Why do you feed your dog whipped cream?"]}}}}})


;;;; Scenario: Pointer 1

;; Tests: Replying in a root workspace with a pointer to a yet ungiven
;; sub-answer.

(set-up {:reset? true})
(run-ask-root-question conn test-agent "What is the capital of [Texas]?")

(start-working conn)
(run [:ask "What is the capital city of $q.0?"])
(run [:reply "Just $sq.0.a."])

(get-root-qas conn test-agent)

(start-working conn)
(run [:reply "Austin. Keep it [weird]."])

(get-root-qas conn test-agent)

(check!
    #{'(["What is the capital of [1: Texas]?" "Just [0: Austin. Keep it [0: weird].]."])})


;;;; Scenario: Pointer 2

;; Tests: Asking a sub-question that contains a pointer to a yet ungiven
;; answer to another sub-question.

(set-up {:reset? true})
(run-ask-root-question conn test-agent "What is the capital of [Texas]?")

(start-working conn)
(doseq [command
        [[:ask "What is the capital city of $q.0?"]
         [:ask "What do you think about $sq.0.a?"]
         [:unlock "sq.1.a"]
         [:unlock "q.0"]
         [:reply "Austin"]
         [:reply "It's a nice city. Once I went to [Clojure/conj] there."]
         [:unlock "sq.1.a.0"]
         [:reply "It is Austin. $sq.1.a.0 happened there once."]]]
    (run command {:trace? true})
    (println))

(get-root-qas conn test-agent)

(check!
    #{'(["What is the capital of [1: Texas]?"
         "It is Austin. [0: Clojure/conj] happened there once."])})


;;;; Scenario: Auto-unlock

(do (set-up {:reset? true})
    (run-ask-root-question conn test-agent "What is the capital of [Texas]?")

    (start-working conn)
    (run [:ask "What is the capital city of $q.0?"])
    (run [:reply "$sq.0.a"])

    (run [:reply "Austin [Keep it weird.]"]))

(check! nil?)

(get-root-qas conn test-agent)

(check!
    #{'(["What is the capital of [1: Texas]?"
         "[0: Austin [0: Keep it weird.]]"])})


;;;; Scenario: Pointer laundering

(set-up {:reset? true})
(run-ask-root-question conn test-agent "How about [bla]?")

(start-working conn)
(run [:ask "What do you think about $q.0?"])
(run [:unlock "q.0"])
(run [:unlock "sq.0.a"])
(run [:reply "I think $q.0."])
(run [:unlock "sq.0.a.0"])

(check!
    #{{"q" "How about [0: bla]?",
       "sq" {"0" {"q" "What do you think about $q.0?", "a" "I think [0: bla]."}},
       "r" :locked}})
