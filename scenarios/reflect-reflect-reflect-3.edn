[:root "What is the capital of [Texas]?"]

P0
{:q  "What is the capital of $0?"
 :sq {}
 :r :locked}

[:ask "What is the capital city of $q.0?"]

P1
{:q  "What is the capital of $0?"
 :sq {0 {:q "What is the capital city of $q.0?"
         :a :locked}}
 :r :locked}

[:unlock "sq.0.a"]

;;;; ▶️ BEGIN In child workspace

C0
{:q "What is the capital city of $0?"
 :sq {}
 :r :locked}

[:unlock "q.0"]

C1
{:q "What is the capital city of [0: Texas]?"
 :sq {}
 :r :locked}

[:ask "Who was the father of $q.0?"]

C2
{:q  "What is the capital city of [0: Texas]?"
 :sq {0 {:q "Who was the father of $q.0?"
         :a :locked}}
 :r  :locked}

[:unlock "q.0.a"]

;;;; ▶️ BEGIN In grandchild workspace

G0
{:q "Who was the father of $1?"
 :r :locked}

[:unlock "r"]

G1
{:q "Who was the father of $1?"
 :r {:parent :locked
     :max-v 1}}

[:unlock "r.parent"]

G2
{:q "Who was the father of $1?"
 :r {:parent {:parent :locked
              :max-v 2}
     :max-v 2}}

[:unlock "r.parent.2"]

G3
{:q "Who was the father of $1?"
 :r {:parent {:parent :locked
              :max-v  2
              2 {:ws :locked
                 :act :locked
                 :children :locked}}
     :max-v  3}}
;; This appears to make more sense. But now I have to change the schema, I
;; guess.

[:unlock "r.parent.2.ws"]

G4
{:q "Who was the father of $1?"
 :r {:parent {:parent :locked
              :max-v  2
              2 {:ws {:q  "What is the capital city of [0: Texas]?"
                      :sq {0 {:q "Who was the father of $q.0?"
                              :a :locked}}
                      :r  :locked}
                 :act :locked
                 :children :locked}}
     :max-v  4}}

[:reply "Stephen F. Austin"]

;;;; ⏹ END In grandchild workspace.

C3
{:q  "What is the capital city of [0: Texas]?"
 :sq {0 {:q "Who was the father of $q.0?"
         :a "Stephen F. Austin"}}
 :r  :locked}

[:unlock "r"]

C4
{:q  "What is the capital city of [0: Texas]?"
 :sq {0 {:q "Who was the father of $q.0?"
         :a "Stephen F. Austin"}}
 :r  {:parent :locked
      :max-v  4}}

[:unlock "r.3"]
;; Note that this has to be r.3. In r.2 there would be the bare child workspace.
;; Because its answer hadn't been unlocked, nobody would have worked on it. So
;; there would be only the question, nothing else.

C5
{:q  "What is the capital city of [0: Texas]?"
 :sq {0 {:q "Who was the father of $q.0?"
         :a "Stephen F. Austin"}}
 :r  {:parent :locked
      :max-v  5
      3 {:ws :locked
         :act :locked
         :children :locked}}}

[:unlock "r.3.children"]

C6
{:q  "What is the capital city of [0: Texas]?"
 :sq {0 {:q "Who was the father of $q.0?"
         :a "Stephen F. Austin"}}
 :r  {:parent :locked
      :max-v  6
      3 {:ws :locked
         :act :locked
         :children {0 :locked}}}}
;; The children keys correspond to the sub-question keys. Ie. children.0 is
;; the workspace belonging to sq.0.

[:unlock "r.3.children.0"]

C7
{:q  "What is the capital city of [0: Texas]?"
 :sq {0 {:q "Who was the father of $q.0?"
         :a "Stephen F. Austin"}}
 :r  {:parent :locked
      :max-v  7
      3 {:ws :locked
         :act :locked
         :children {0 {:parent :locked
                       :max-v 4}}}}}

[:unlock "r.3.children.0.4"]

C8
{:q  "What is the capital city of [0: Texas]?"
 :sq {0 {:q "Who was the father of $q.0?"
         :a "Stephen F. Austin"}}
 :r  {:parent :locked
      :max-v  8
      3 {:ws :locked
         :act :locked
         :children {0 {:parent :locked
                       :max-v 4
                       4 {:ws :locked
                          :act :locked
                          :children :locked}}}}}}

[:unlock "r.3.children.0.4.ws"]

C9
{:q  "What is the capital city of [0: Texas]?"
 :sq {0 {:q "Who was the father of $q.0?"
         :a "Stephen F. Austin"}}
 :r  {:parent :locked
      :max-v  9
      3 {:ws :locked
         :act :locked
         :children {0 {:parent :locked
                       :max-v 4
                       4 {:ws {:q "Who was the father of $1?"
                               :r {:parent {:parent :locked
                                            :max-v  2
                                            2 {:ws {:q  "What is the capital city of [0: Texas]?"
                                                    :sq {0 {:q "Who was the father of $q.0?"
                                                            :a :locked}}
                                                    :r  :locked}
                                               :act :locked
                                               :children :locked}}
                                   :max-v  4}}
                          :act :locked
                          :children :locked}}}}}}

;; Now I cannot unlock a path with an "r" in the middle, only at the beginning.
;; So every reflection entry that is under a workspace's "r" entry must have
;; been unlocked by that workspace. Except for what is under the "r" entry of a
;; reflected workspace, which must have been unlocked by that reflected
;; workspace. And so on.
;;
;; If I wanted to know what is behind r.3.children.0.4.ws.r.parent.2.act,
;; I'd have to launder it through a subquestion. Or I could look at r.3.act
;; directly.
;;
;; Note that "r.3.children.0.4.ws.r.parent.2.act" looks unwieldy, but once you
;; know how to read it, it's easy. Current ws → version 3 → child for
;; sub-question 0 → version 4 → workspace → reflected parent → action in
;; version 2.

[:unlock "r.3.act"]

C10
{:q  "What is the capital city of [0: Texas]?"
 :sq {0 {:q "Who was the father of $q.0?"
         :a "Stephen F. Austin"}}
 :r  {:parent :locked
      :max-v  10
      3 {:ws :locked
         :act [:unlock "r"]
         :children {0 {:parent :locked
                       :max-v 4
                       4 {:ws {:q "Who was the father of $1?"
                               :r {:parent {:parent :locked
                                            :max-v  2
                                            2 {:ws {:q  "What is the capital city of [0: Texas]?"
                                                    :sq {0 {:q "Who was the father of $q.0?"
                                                            :a :locked}}
                                                    :r  :locked}
                                               :act :locked
                                               :children :locked}}
                                   :max-v  4}}
                          :act :locked
                          :children :locked}}}}}}

[:reply "Austin"]

;;;; ⏹ END In grandchild workspace.

P2
{:q  "What is the capital of $0?"
 :sq {0 {:q "What is the capital city of $q.0?"
         :a "Austin"}}
 :r :locked}

[:unlock "r"]

P3
{:q  "What is the capital of $0?"
 :sq {0 {:q "What is the capital city of $q.0?"
         :a "Austin"}}
 :r {:parent :locked
     :max-v 3}}

[:unlock "r.2"]

P4
{:q  "What is the capital of $0?"
 :sq {0 {:q "What is the capital city of $q.0?"
         :a "Austin"}}
 :r {:parent :locked
     :max-v 4
     2 {:ws :locked
        :act :locked
        :children :locked}}}

[:unlock "r.2.children"]

P5
{:q  "What is the capital of $0?"
 :sq {0 {:q "What is the capital city of $q.0?"
         :a "Austin"}}
 :r {:parent :locked
     :max-v 5
     2 {:ws :locked
        :act :locked
        :children {0 :locked}}}}

[:unlock "r.2.children.0"]

P6
{:q  "What is the capital of $0?"
 :sq {0 {:q "What is the capital city of $q.0?"
         :a "Austin"}}
 :r {:parent :locked
     :max-v 6
     2 {:ws :locked
        :act :locked
        :children {0 {:parent :locked
                      :max-v 10}}}}}

[:unlock "r.2.children.0.10"]

P7
{:q  "What is the capital of $0?"
 :sq {0 {:q "What is the capital city of $q.0?"
         :a "Austin"}}
 :r {:parent :locked
     :max-v 7
     2 {:ws :locked
        :act :locked
        :children {0 {:parent :locked
                      :max-v 10
                      {10 {:ws :locked
                           :act :locked
                           :children :locked}}}}}}}

[:unlock "r.2.children.0.10.ws"]

P8
{:q  "What is the capital of $0?"
 :sq {0 {:q "What is the capital city of $q.0?"
         :a "Austin"}}
 :r {:parent :locked
     :max-v 8
     2 {:ws :locked
        :act :locked
        :children {0 {:parent :locked
                      :max-v 10
                      {10 {:ws {:q  "What is the capital city of [0: Texas]?"
                                :sq {0 {:q "Who was the father of $q.0?"
                                        :a "Stephen F. Austin"}}
                                :r  {:parent :locked
                                     :max-v  10
                                     3 {:ws :locked
                                        :act [:unlock "r"]
                                        :children {0 {:parent :locked
                                                      :max-v 4
                                                      4 {:ws {:q "Who was the father of $1?"
                                                              :r {:parent {:parent :locked
                                                                           :max-v  2
                                                                           2 {:ws {:q  "What is the capital city of [0: Texas]?"
                                                                                   :sq {0 {:q "Who was the father of $q.0?"
                                                                                           :a :locked}}
                                                                                   :r  :locked}
                                                                              :act :locked
                                                                              :children :locked}}
                                                                  :max-v  4}}
                                                         :act :locked
                                                         :children :locked}}}}}}
                           :act :locked
                           :children :locked}}}}}}}

;; How would I unlock r.2.children.0.10.ws.r.2, for example? I could just
;; unlock r.2.children.0.2.

;; Nested reflection looks quite straightforward now. Better than in
;; reflect-reflect-reflect-2.edn.
